Index: bytebrigade/barcodereader/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom . import views\nurlpatterns = [\n        path('', views.barcode_lookup, name='barcode_lookup'),\n        path('recycle/', views.recycle_confirm, name='recycle_confirm'),\n        path('recycle/create/', views.create_product, name='create_product'),\n        path('recycle/create/success/', views.success_submit, name='success_submit'),\n    ]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/barcodereader/urls.py b/bytebrigade/barcodereader/urls.py
--- a/bytebrigade/barcodereader/urls.py	(revision 1d3fc3bbf94927ad5ff6a20838bddeca385c140f)
+++ b/bytebrigade/barcodereader/urls.py	(date 1677625220075)
@@ -4,5 +4,5 @@
         path('', views.barcode_lookup, name='barcode_lookup'),
         path('recycle/', views.recycle_confirm, name='recycle_confirm'),
         path('recycle/create/', views.create_product, name='create_product'),
-        path('recycle/create/success/', views.success_submit, name='success_submit'),
+        path('recycle/create/success/', views.create_product_success, name='success_submit'),
     ]
\ No newline at end of file
Index: bytebrigade/home/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from os import truncate\n\nfrom django.shortcuts import render, redirect\nfrom .models import Transaction, Statistic, BinData\nimport webbrowser\nimport geopy.distance\n\n\n# Create your views here.\ndef getTransactions(request):\n    # If user not login, redirect them to login page.\n    if not request.user.is_authenticated:\n        return redirect('login')\n\n    # When user press the 'scan it!' button, check if they are within range.\n    data = Transaction.objects.all()\n\n    if request.method == 'POST':\n        distance, closeBin = withinRange(request)\n        distance = 2\n        if distance > 10:\n            msg = \"You're too far from the bin by\", distance, \"metres\"\n            data_dict = {\n                'Transaction': data,\n                'message': msg\n            }\n            a_website = \"http://maps.google.com/?q=\" + str(closeBin[0]) + \",\" + str(closeBin[1])\n            webbrowser.open_new_tab(a_website)\n            return render(request, 'home/index.html', data_dict)\n        else:\n            return redirect('barcode_lookup')\n    else:\n        data_dict = {\n            'Transaction': data,\n            'message': 'Scan Item?'\n        }\n        return render(request, 'home/index.html', data_dict)\n    # Default looking of index.\n\n\ndef getLeaderboard(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    statData = Statistic.objects.all().order_by('-points')\n    data_dict = {\n        'Statistics': statData,\n    }\n    return render(request, 'home/Leaderboard.html', data_dict)\n\n\ndef withinRange(request):\n    curr_lat = float(request.POST.get(\"location_lat\"))\n    curr_long = float(request.POST.get(\"location_long\"))\n    coords_1 = (curr_lat, curr_long)\n\n    shortestDistance = 100000000\n    closeBin = None\n\n    for bin in BinData.objects.all():\n        coords_2 = (bin.binLat, bin.binLong)\n        distance = geopy.distance.geodesic(coords_1, coords_2).m\n        if distance < shortestDistance:\n            shortestDistance = distance\n            closeBin = coords_2\n\n    return shortestDistance, closeBin\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/home/views.py b/bytebrigade/home/views.py
--- a/bytebrigade/home/views.py	(revision 1d3fc3bbf94927ad5ff6a20838bddeca385c140f)
+++ b/bytebrigade/home/views.py	(date 1677627942695)
@@ -16,7 +16,8 @@
     data = Transaction.objects.all()
 
     if request.method == 'POST':
-        distance, closeBin = withinRange(request)
+        distance, close_bin, bin_object = withinRange(request)
+        request.session['bin_data'] = bin_object.binId
         distance = 2
         if distance > 10:
             msg = "You're too far from the bin by", distance, "metres"
@@ -24,7 +25,7 @@
                 'Transaction': data,
                 'message': msg
             }
-            a_website = "http://maps.google.com/?q=" + str(closeBin[0]) + "," + str(closeBin[1])
+            a_website = "http://maps.google.com/?q=" + str(close_bin[0]) + "," + str(close_bin[1])
             webbrowser.open_new_tab(a_website)
             return render(request, 'home/index.html', data_dict)
         else:
@@ -55,13 +56,15 @@
 
     shortestDistance = 100000000
     closeBin = None
+    binObject = None
 
     for bin in BinData.objects.all():
         coords_2 = (bin.binLat, bin.binLong)
         distance = geopy.distance.geodesic(coords_1, coords_2).m
         if distance < shortestDistance:
             shortestDistance = distance
-            closeBin = coords_2
+            close_bin = coords_2
+            bin_object = bin
 
-    return shortestDistance, closeBin
+    return shortestDistance, close_bin, bin_object
 
Index: bytebrigade/barcodereader/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.urls import reverse\nfrom .forms import barcode_form, product_form\nimport urllib.request\nimport json\nfrom home.models import Statistic, Product\n\n\ndef barcode_lookup(request):\n    # If the user not log-in, redirect them to login page\n    if not request.user.is_authenticated:\n        return redirect('login')\n    # If\n    if request.method == 'POST':\n        barcode_camera = request.POST.get(\"barcode\")\n        print(\"Value is \", barcode_camera)\n        if Product.objects.filter(barcode=barcode_camera).exists():\n            print(\"in db\")\n            product_data = Product.objects.get(barcode=barcode_camera)\n            print(product_data)\n            data_dict = {'Product': product_data}\n            print(data_dict)\n            return redirect('recycle_confirm')\n            # redirect to product recycle page\n        else:\n            print(\"not in db\")\n            barcode = barcode_camera\n            request.session['barcode'] = barcode\n            return redirect('create_product')\n\n    else:\n        return render(request, 'BCscanner/Scanner_page.html')\n\n\ndef create_product(request):\n    # we need to send the user to a page that contains a form\n    # Ask the user for the weight and material of the product\n    # Then add the product to the database\n    print(request.method)\n    if not request.user.is_authenticated:\n        return redirect('login')\n    if request.method == 'POST':\n        request.session['barcode'] = ''\n        print('Get Post')\n        form = request.POST\n        print(\"Made Form\")\n        new_product = Product.objects.create(\n            barcode=form.get(\"barcode\"),\n            name=form.get(\"name\"),\n            type=form.get(\"type\"),\n            weight=form.get(\"weight\"),\n            category=form.get(\"category\"),\n        )\n        print(\"temp_made\")\n        new_product.save()\n        print(\"Saved\")\n        return redirect('recycle_confirm')\n    if request.session['barcode']:\n        barcode = {'barcode': request.session['barcode']}\n        return render(request, 'BCscanner/new_product_page.html', barcode)\n\n\ndef success_submit(request):\n    pass\n\n\ndef recycle_confirm(request):\n    return HttpResponse(\"You Just submit it!\")\n\n\ndef api_lookup(barcode):\n    print(\"d\")\n    api_key = \"5bcg2pbed762819eeppkc2qhjak1l4\"\n    url = \"https://api.barcodelookup.com/v3/products?barcode=\" + barcode + \"&formatted=y&key=\" + api_key\n    print(\"j\")\n    with urllib.request.urlopen(url) as url:\n        data = json.loads(url.read().decode())\n    print(\"l\")\n    print(data)\n    print(\"\\n\")\n    data = data[\"products\"][0]\n    return data\n\n\ndef database_lookup(request):\n    print(request.POST)\n    barcode_camera = request.POST.get(\"barcode\")\n    print(\"Value is \", barcode_camera)\n    if Product.objects.filter(barcode=barcode_camera).exists():\n        print(\"in db\")\n        product_data = Product.objects.get(barcode=barcode_camera)\n        print(product_data)\n    else:\n        print(\"not in db\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/barcodereader/views.py b/bytebrigade/barcodereader/views.py
--- a/bytebrigade/barcodereader/views.py	(revision 1d3fc3bbf94927ad5ff6a20838bddeca385c140f)
+++ b/bytebrigade/barcodereader/views.py	(date 1677630133716)
@@ -1,32 +1,23 @@
 from django.shortcuts import render, redirect
-from django.http import HttpResponse, HttpResponseRedirect
-from django.urls import reverse
-from .forms import barcode_form, product_form
+from django.http import HttpResponse
 import urllib.request
 import json
-from home.models import Statistic, Product
+from home.models import Statistic, Product, BinData, Transaction
+from datetime import datetime
 
 
 def barcode_lookup(request):
     # If the user not log-in, redirect them to login page
     if not request.user.is_authenticated:
         return redirect('login')
-    # If
     if request.method == 'POST':
-        barcode_camera = request.POST.get("barcode")
-        print("Value is ", barcode_camera)
-        if Product.objects.filter(barcode=barcode_camera).exists():
-            print("in db")
-            product_data = Product.objects.get(barcode=barcode_camera)
-            print(product_data)
-            data_dict = {'Product': product_data}
-            print(data_dict)
+        barcode_product = request.POST.get("barcode")
+        # We set the session barcode so that we can then use it in the other areas of the project
+        request.session['barcode'] = barcode_product
+        if Product.objects.filter(barcode=barcode_product).exists():
             return redirect('recycle_confirm')
             # redirect to product recycle page
         else:
-            print("not in db")
-            barcode = barcode_camera
-            request.session['barcode'] = barcode
             return redirect('create_product')
 
     else:
@@ -37,14 +28,10 @@
     # we need to send the user to a page that contains a form
     # Ask the user for the weight and material of the product
     # Then add the product to the database
-    print(request.method)
     if not request.user.is_authenticated:
         return redirect('login')
     if request.method == 'POST':
-        request.session['barcode'] = ''
-        print('Get Post')
         form = request.POST
-        print("Made Form")
         new_product = Product.objects.create(
             barcode=form.get("barcode"),
             name=form.get("name"),
@@ -52,21 +39,62 @@
             weight=form.get("weight"),
             category=form.get("category"),
         )
-        print("temp_made")
         new_product.save()
-        print("Saved")
         return redirect('recycle_confirm')
-    if request.session['barcode']:
-        barcode = {'barcode': request.session['barcode']}
-        return render(request, 'BCscanner/new_product_page.html', barcode)
+    elif request.session['barcode']:
+        if not Product.objects.filter(barcode=request.session['barcode']).exists():
+            barcode = {'barcode': request.session['barcode']}
+            return render(request, 'BCscanner/new_product_page.html', barcode)
+        else:
+            return redirect('index')
+
 
+# create a function that is called by barcode_lookup() once the whole product shit is done
+# This function adds the transaction but doesn't render anything, it is a procedure
 
-def success_submit(request):
+
+def create_product_success(request):
     pass
+    # This function is called after a new product is made
+    # it present to the user what the product is and the points that they get
+    # Then it sends then to recycle_confirm
 
 
 def recycle_confirm(request):
-    return HttpResponse("You Just submit it!")
+    # The function that handles recording a transaction
+    # Then it takes you to a page showing what stats you gained
+    # There bottom for confirm
+    if not request.user.is_authenticated:
+        return redirect('login')
+    try:
+        barcode_product = request.session['barcode']
+        bin_data = request.session['bin_data']
+        if Product.objects.filter(barcode=barcode_product).exists() \
+                and BinData.objects.filter(binId=bin_data).exists():
+            product_data = Product.objects.get(barcode=barcode_product)
+            user_data = request.user
+            cur_time = (datetime.now()).strftime("%H:%M:%S")
+            bin_data = BinData.objects.get(binId=bin_data)
+            new_transaction = Transaction.objects.create(
+                product=product_data,
+                user=user_data,
+                time=cur_time,
+                bin=bin_data,
+            )
+            new_transaction.save()
+            request.session['barcode'] = -1
+            request.session['bin_data'] = -1
+        return HttpResponse("You Just submit it!")
+    except Exception as e:
+        print(e)
+        # They tried to scam us and haven't scanned a product
+        return redirect('barcode_lookup')
+
+
+def recycle_result_stats_view(request):
+    # The function that shows when user finished recycle
+    # The page have stats of points,
+    pass
 
 
 def api_lookup(barcode):
Index: bytebrigade/home/templates/home/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'navbar.html' %}\n{% load static %}\n\n{% block title %} Home - Welcome! {% endblock %}\n\n{% block content %}\n    <div class=\"fs-6\" style=\"margin-right: 28px;margin-top: 14px;margin-bottom: 22px;color: var(--bs-secondary);margin-left: 28px;\">\n        <h1 style=\"background: #e1edbd;font-size: 30px;padding-bottom: 5px;color: var(--bs-black);\">Daily Feed</h1>\n        <div style=\"background: #e1edbd;\">\n        <table class = \"table table-striped\">\n                <thead style=\"background: #82b068; padding: 10px\">\n                    <tr>\n                        <th style=\"width: 200px\">Time</th>\n                        <th style=\"width: 200px\">Recycled</th>\n                        <th style=\"width: 200px\">Likes</th>\n                    </tr>\n                </thead>\n                <tbody style=\"color: black;\">\n                    {% for item in Transaction %}\n                    <tr style = \"border-bottom: #82b068 solid 2px;\">\n                        <td>{{item.time}}</td>\n                        <td>{{item.user}} just recycled {{item.product}} at {{item.bin.binId}}</td>\n                        <td>{{item.likes}}</td>\n                    </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n            <form id = \"formId\" method=\"POST\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"location_lat\" id=\"lat\" value=0>\n                <input type=\"hidden\" name=\"location_long\" id=\"long\" value=0>\n                <div class=\"btn btn-light me-2\"><button class=\"btn btn-primary d-block w-100\" type=\"submit\">{{message}}</button></div>\n            </form>\n    </div>\n    <script>\n        currentLocationInsert();\n\n        function currentLocationInsert() {\n            function getLocation() {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(binDistCalc);\n                } else {\n                    x.innerHTML = \"Geolocation is not supported by this browser.\";\n                }\n            }\n\n            function binDistCalc(position) {\n                var lat = position.coords.latitude;\n                var long = position.coords.longitude;\n                document.getElementById(\"lat\").value = lat;\n                document.getElementById(\"long\").value = long;\n            }\n            getLocation();\n        }\n    </script>\n{% endblock %}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/home/templates/home/index.html b/bytebrigade/home/templates/home/index.html
--- a/bytebrigade/home/templates/home/index.html	(revision 1d3fc3bbf94927ad5ff6a20838bddeca385c140f)
+++ b/bytebrigade/home/templates/home/index.html	(date 1677628228264)
@@ -19,7 +19,7 @@
                     {% for item in Transaction %}
                     <tr style = "border-bottom: #82b068 solid 2px;">
                         <td>{{item.time}}</td>
-                        <td>{{item.user}} just recycled {{item.product}} at {{item.bin.binId}}</td>
+                        <td>{{item.user}} just recycled {{item.product.name}} at Bin {{item.bin.binId}}</td>
                         <td>{{item.likes}}</td>
                     </tr>
                     {% endfor %}
