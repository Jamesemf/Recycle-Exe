Index: bytebrigade/bins/templates/bin_nav.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'navbar.html' %}\n\n{% block title %} Bin Navigation {% endblock %}\n\n{% block style %}\n<style>\n    body {\n        /*display: flex;\n        flex-direction: column;\n        /*height: 100vh;*/\n    }\n\n    .compass {\n        position: relative;\n        width: 70vw;\n        height: 70vw;\n        border-radius: 50%;\n        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);\n        margin: auto;\n    }\n\n    .compass > .compass-circle,\n    .compass > .my-point {\n        position: absolute;\n        width: 90%;\n        height: 90%;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        transition: transform 0.1s ease-out;\n        background: url({% static 'figures/arrow.png' %})\n            center no-repeat;\n        background-size: contain;\n    }\n\n    #compass{\n        vertical-align: middle;\n        width: 50%;\n        height: 50%;\n    }\n\n    .compass > .my-point {\n        opacity: 0;\n        width: 20%;\n        height: 20%;\n        background: rgb(8, 223, 69);\n        border-radius: 50%;\n        transition: opacity 0.5s ease-out;\n    }\n\n    .start-btn {\n        margin-bottom: auto;\n    }\n</style>\n{% endblock %}\n\n{% block content %}\n    <div class=\"card main-content\">\n                <div class=\"card-body\">\n                    <div style=\"text-align: center;\">\n                        <h6 class=\"text-muted mb-2\">Finding</h6>\n                        <h4>{{ BinGoal.binName }}</h4>\n                    </div>\n                    <div style=\"text-align: center;\">\n                        <div class=\"compass\">\n                            <div class=\"compass-circle\"></div>\n                            <div class=\"my-point\"></div>\n                        </div>\n                        <button class=\"start-btn\" style=\"visibility: hidden;\">Start compass</button>\n                    </div>\n                    <div style=\"text-align: center;\">\n                        <h6 class=\"text-muted mb-2\" id=\"distance\"></h6>\n                    </div>\n                    <div>\n                        <form id = \"formId\" method=\"POST\">\n                            {% csrf_token %}\n                            <input type=\"hidden\" name=\"distance\" id=\"distance\" value=0>\n                        </form>\n                    </div>\n                </div>\n    </div>\n{% endblock %}\n\n{% block script %}\n<script>\n    // Gets the html elements with the relevant classes\n    const compassCircle = document.querySelector(\".compass-circle\");\n    const myPoint = document.querySelector(\".my-point\");\n    const startBtn = document.querySelector(\".start-btn\");\n\n    // Checks if the device uses IOS or not\n    const isIOS =\n      navigator.userAgent.match(/(iPod|iPhone|iPad)/) &&\n      navigator.userAgent.match(/AppleWebKit/);\n\n    /** Function run when the page opens\n     *\n     */\n    function init() {\n        startBtn.addEventListener(\"click\", startCompass);\n        navigator.geolocation.getCurrentPosition(locationHandler);\n\n      if (!isIOS) {\n          console.log(\"NOT IOS\");\n          window.addEventListener(\"deviceorientationabsolute\", handler, true);\n      }\n    }\n\n    /** starts compass if it is IOS\n     *\n     */\n    function startCompass() {\n      if (isIOS) {\n        // Requests permission\n        DeviceOrientationEvent.requestPermission().then((response) => {\n            if (response === \"granted\") {\n              window.addEventListener(\"deviceorientation\", handler, true);\n            } else {\n              alert(\"has to be allowed!\");\n            }\n          })\n          .catch(() => alert(\"not supported\"));\n      }\n    }\n\n    /** Starts compass if not IOS\n     *\n     * @param e\n     */\n    function handler(e) {\n        console.log(\"HANDLER\");\n        compass = e.webkitCompassHeading || Math.abs(e.alpha - 360);\n        compassCircle.style.transform = `translate(-50%, -50%) rotate(${-compass}deg)`;\n\n        // Â±15 degree\n        if((pointDegree < Math.abs(compass) && pointDegree + 15 > Math.abs(compass)) || pointDegree > Math.abs(compass + 15) || pointDegree < Math.abs(compass))\n        {\n            myPoint.style.opacity = 0;\n        } else if (pointDegree) {\n            myPoint.style.opacity = 1;\n      }\n    }\n\n    // Automatically refreshes the degree to point to at a set interval\n    let pointDegree;\n    let auto_refresh = setInterval(function() { navigator.geolocation.getCurrentPosition(locationHandler); }, 3000);\n    function locationHandler(position) {\n      const { latitude, longitude } = position.coords;\n      pointDegree = calcDegreeToPoint(latitude, longitude);\n\n      if (pointDegree < 0) {\n        pointDegree = pointDegree + 360;\n      }\n      binDistance(latitude,longitude)\n    }\n\n    /**\n     * Calculates the actual degree to point to\n     * @param latitude\n     * @param longitude\n     * @returns {number}\n     */\n    function calcDegreeToPoint(latitude, longitude) {\n      {# Chaneg this to be the bin location#}\n      const point = {\n        lat: {{BinGoal.binLat}} ,\n        long: {{BinGoal.binLong}} };\n\n      const psi = bearing(latitude, longitude, point.lat, point.long);\n\n      return Math.round(psi);\n    }\n\n    // Converts from degrees to radians.\n    function toRadians(degrees) {\n      return degrees * Math.PI / 180;\n    }\n\n    // Converts from radians to degrees.\n    /**\n     *\n     * @param radians\n     * @returns {number}\n     */\n    function toDegrees(radians) {\n      return radians * 180 / Math.PI;\n    }\n\n    // Calculates bearing from startLat to endLat\n    /**\n     *\n     * @param startLat\n     * @param startLng\n     * @param destLat\n     * @param destLng\n     * @returns {number}\n     */\n    function bearing(startLat, startLng, destLat, destLng){\n      startLat = toRadians(startLat);\n      startLng = toRadians(startLng);\n      destLat = toRadians(destLat);\n      destLng = toRadians(destLng);\n\n      y = Math.sin(destLng - startLng) * Math.cos(destLat);\n      x = Math.cos(startLat) * Math.sin(destLat) -\n            Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);\n      brng = Math.atan2(y, x);\n      brng = toDegrees(brng);\n      return (brng + 360) % 360;\n    }\n\n    /**\n     *\n     * @param deg\n     * @returns {number}\n     */\n    function deg2rad(deg) {\n        return deg * (Math.PI / 180);\n    }\n\n    // Calculates distance between startLat and endLat\n    /**\n     *\n     * @param latitude\n     * @param longitude\n     */\n    function binDistance(latitude,longitude){\n        var lat1 = latitude;\n        var lon1 = longitude;\n        var lat2= {{BinGoal.binLat}};\n        var lon2= {{BinGoal.binLong}};\n        var R = 6371; // Radius of the earth in km\n        var dLat = deg2rad(lat2 - lat1);  // deg2rad below\n        var dLon = deg2rad(lon2 - lon1);\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = 1000 * R * c; // Distance in m\n        d = d.toFixed(2);\n        document.getElementById('distance').innerHTML = \"Distance to bin: \"+d+\"m\";\n        if (d<=3) {\n            document.getElementById(\"formId\").submit();\n        }\n    }\n    init();\n</script>\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/bins/templates/bin_nav.html b/bytebrigade/bins/templates/bin_nav.html
--- a/bytebrigade/bins/templates/bin_nav.html	(revision d07fb99b95387d9276b3b795053bd2835ed9ba0d)
+++ b/bytebrigade/bins/templates/bin_nav.html	(date 1678990123674)
@@ -4,12 +4,6 @@
 
 {% block style %}
 <style>
-    body {
-        /*display: flex;
-        flex-direction: column;
-        /*height: 100vh;*/
-    }
-
     .compass {
         position: relative;
         width: 70vw;
@@ -56,28 +50,29 @@
 
 {% block content %}
     <div class="card main-content">
-                <div class="card-body">
-                    <div style="text-align: center;">
-                        <h6 class="text-muted mb-2">Finding</h6>
-                        <h4>{{ BinGoal.binName }}</h4>
-                    </div>
-                    <div style="text-align: center;">
-                        <div class="compass">
-                            <div class="compass-circle"></div>
-                            <div class="my-point"></div>
-                        </div>
-                        <button class="start-btn" style="visibility: hidden;">Start compass</button>
-                    </div>
-                    <div style="text-align: center;">
-                        <h6 class="text-muted mb-2" id="distance"></h6>
-                    </div>
-                    <div>
-                        <form id = "formId" method="POST">
-                            {% csrf_token %}
-                            <input type="hidden" name="distance" id="distance" value=0>
-                        </form>
-                    </div>
-                </div>
+        <div class="card-body">
+            <div style="text-align: center;">
+                <h6 class="text-muted mb-2">Finding</h6>
+                <h4>{{ BinGoal.binName }}</h4>
+            </div>
+            <div style="text-align: center;">
+                <h6 class="text-muted mb-2" id="distance"></h6>
+            </div>
+            <div style="text-align: center;">
+                <div class="compass">
+                    <img id="compass" src="{% static 'figures/arrow.png' %}">
+                    <div class="compass-circle"></div>
+                    <div class="my-point"></div>
+                </div>
+                <button class="start-btn" style="visibility: hidden;">Start compass</button>
+            </div>
+            <div>
+                <form id = "formId" method="POST">
+                    {% csrf_token %}
+                    <input type="hidden" name="distance" id="distance" value=0>
+                </form>
+            </div>
+        </div>
     </div>
 {% endblock %}
 
@@ -85,6 +80,7 @@
 <script>
     // Gets the html elements with the relevant classes
     const compassCircle = document.querySelector(".compass-circle");
+    const compassImg = document.getElementById(compass);
     const myPoint = document.querySelector(".my-point");
     const startBtn = document.querySelector(".start-btn");
 
@@ -95,6 +91,7 @@
 
     /** Function run when the page opens
      *
+     *  Runs the handler function if the devise isn't ios
      */
     function init() {
         startBtn.addEventListener("click", startCompass);
