Index: bytebrigade/barcodereader/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\nfrom . import views\nurlpatterns = [\n        path('', views.barcode_lookup, name='barcode_lookup'),\n        path('recycle/', views.recycle_confirm, name='recycle_confirm'),\n        path('recycle/create/', views.create_product, name='create_product'),\n        path('recycle/create/success/', views.create_product_success, name='success_submit'),\n    ]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/barcodereader/urls.py b/bytebrigade/barcodereader/urls.py
--- a/bytebrigade/barcodereader/urls.py	(revision 40784f969464e404a1273e37623b4400651a722d)
+++ b/bytebrigade/barcodereader/urls.py	(date 1677693780439)
@@ -4,5 +4,4 @@
         path('', views.barcode_lookup, name='barcode_lookup'),
         path('recycle/', views.recycle_confirm, name='recycle_confirm'),
         path('recycle/create/', views.create_product, name='create_product'),
-        path('recycle/create/success/', views.create_product_success, name='success_submit'),
     ]
\ No newline at end of file
Index: bytebrigade/barcodereader/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport urllib.request\nimport json\nfrom home.models import Statistic, Product, BinData, Transaction\nfrom datetime import datetime\nfrom django.contrib.auth.models import User\n\n\ndef barcode_lookup(request):\n    # If the user not log-in, redirect them to login page\n    if not request.user.is_authenticated:\n        return redirect('login')\n    if request.method == 'POST':\n        barcode_product = request.POST.get(\"barcode\")\n        # We set the session barcode so that we can then use it in the other areas of the project\n        request.session['barcode'] = barcode_product\n        if Product.objects.filter(barcode=barcode_product).exists():\n            return redirect('recycle_confirm')\n            # redirect to product recycle page\n        else:\n            return redirect('create_product')\n\n    else:\n        return render(request, 'BCscanner/Scanner_page.html')\n\n\ndef create_product(request):\n    # we need to send the user to a page that contains a form\n    # Ask the user for the weight and material of the product\n    # Then add the product to the database\n    if not request.user.is_authenticated:\n        return redirect('login')\n    if request.method == 'POST':\n        form = request.POST\n        new_product = Product.objects.create(\n            barcode=form.get(\"barcode\"),\n            name=form.get(\"name\"),\n            weight=float(form.get(\"weight\")) / 1000,\n            material=form.get(\"material\"),\n            recycle=form.get(\"recycle\")\n        )\n        new_product.save()\n\n        product_data = Product.objects.get(barcode=form.get(\"barcode\"))\n        addstats(request.user, product_data, 50)\n\n        return redirect('recycle_confirm')\n    elif request.session['barcode']:\n        if not Product.objects.filter(barcode=request.session['barcode']).exists():\n            barcode = {'barcode': request.session['barcode']}\n            return render(request, 'BCscanner/new_product_page.html', barcode)\n        else:\n            return redirect('index')\n\n\n# create a function that is called by barcode_lookup() once the whole product shit is done\n# This function adds the transaction but doesn't render anything, it is a procedure\n\n\ndef create_product_success(request):\n    pass\n    # This function is called after a new product is made\n    # it present to the user what the product is and the points that they get\n    # Then it sends then to recycle_confirm\n\n\ndef recycle_confirm(request):\n    # The function that handles recording a transaction\n    # Then it shows you to a popup showing what stats you gained on the home_page\n    if not request.user.is_authenticated:\n        return redirect('login')\n    try:\n        barcode_product = request.session['barcode']\n        bin_data = request.session['bin_data']\n        if Product.objects.filter(barcode=barcode_product).exists() \\\n                and BinData.objects.filter(binId=bin_data).exists():\n            product_data = Product.objects.get(barcode=barcode_product)\n            user_data = request.user\n            cur_time = (datetime.now()).strftime(\"%H:%M:%S\")\n            bin_data = BinData.objects.get(binId=bin_data)\n            new_transaction = Transaction.objects.create(\n                product=product_data,\n                user=user_data,\n                time=cur_time,\n                bin=bin_data,\n            )\n            new_transaction.save()\n            request.session['barcode'] = -1\n            request.session['bin_data'] = -1\n        # Call a function that will take in the calculate the points for the user\n        # If the product is new add points, this is handle in the create product part\n        # def addstats(points,kg)\n            weight = product_data.weight\n            points = round(weight * 122)\n            print(\"h\")\n            addstats(request.user, product_data, points, weight)  # need to include the product\n            print(\"j\")\n\n            data = Transaction.objects.all()\n            data_dict = {\n                'Transaction': data,\n                'popup': 1,\n                'newPoints': 1,\n                'product': product_data.name,\n                'points': points,\n\n            }\n            print(\"k\")\n            print(data_dict)\n            return render(request, 'home/index.html', data_dict)\n        return redirect('barcode_lookup')\n    except Exception as e:\n        print(e)\n        # They tried to scam us and haven't scanned a product\n        return redirect('barcode_lookup')\n\n\ndef recycle_result_stats_view(request):\n    # The function that shows when user finished recycle\n    # The page have stats of points,\n    pass\n\n\ndef api_lookup(barcode):\n    print(\"d\")\n    api_key = \"5bcg2pbed762819eeppkc2qhjak1l4\"\n    url = \"https://api.barcodelookup.com/v3/products?barcode=\" + barcode + \"&formatted=y&key=\" + api_key\n    print(\"j\")\n    with urllib.request.urlopen(url) as url:\n        data = json.loads(url.read().decode())\n    print(\"l\")\n    print(data)\n    print(\"\\n\")\n    data = data[\"products\"][0]\n    return data\n\n\ndef database_lookup(request):\n    print(request.POST)\n    barcode_camera = request.POST.get(\"barcode\")\n    print(\"Value is \", barcode_camera)\n    if Product.objects.filter(barcode=barcode_camera).exists():\n        print(\"in db\")\n        product_data = Product.objects.get(barcode=barcode_camera)\n        print(product_data)\n    else:\n        print(\"not in db\")\n\n\ndef addstats(user, product, points: int, kg=0):\n    user_stats = Statistic.objects.get(user=user)\n    user_stats.points += points\n    kg *= 0.09\n    print(\"added points\")\n    user_stats.curweek += kg  # change field\n    print(\"added curweek\")\n    user_stats.curmonth += kg\n    print(\"added curmonth\")\n    user_stats.curyear += kg\n    print(\"added curyear\")\n    user_stats.lastRecycle = product\n    print(\"added lastRecycle\")\n    user_stats.save()  # this will update only\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bytebrigade/barcodereader/views.py b/bytebrigade/barcodereader/views.py
--- a/bytebrigade/barcodereader/views.py	(revision 40784f969464e404a1273e37623b4400651a722d)
+++ b/bytebrigade/barcodereader/views.py	(date 1677694479892)
@@ -154,13 +154,9 @@
     kg *= 0.09
     print("added points")
     user_stats.curweek += kg  # change field
-    print("added curweek")
     user_stats.curmonth += kg
-    print("added curmonth")
     user_stats.curyear += kg
-    print("added curyear")
     user_stats.lastRecycle = product
-    print("added lastRecycle")
     user_stats.save()  # this will update only
 
 
